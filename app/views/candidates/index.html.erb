<p id="notice"><%= notice %></p>

<h1>Listing Candidates</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Party</th>
      <th>Betfaircode</th>
      <th>Primaryodds</th>
      <th>Presidencyodds</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @candidates.each do |candidate| %>
      <tr>
        <td><%= candidate.name %></td>
        <td><%= candidate.party %></td>
        <td><%= candidate.betfaircode %></td>
        <td><%= candidate.primaryodds %></td>
        <td><%= candidate.presidencyodds %></td>
        <td><%= link_to 'Show', candidate %></td>
        <td><%= link_to 'Edit', edit_candidate_path(candidate) %></td>
        <td><%= link_to 'Destroy', candidate, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Candidate', new_candidate_path %>

<div class="mygraph">hello</div>

<script>

  // var margin = {top: 20, right: 20, bottom: 30, left: 40},
  //     width = 960 - margin.left - margin.right,
  //     height = 500 - margin.top - margin.bottom;

  // var x = d3.scale.ordinal()
  //     .rangeRoundBands([0, width], .1);

  // var y = d3.scale.linear()
  //     .range([height, 0]);

  // var xAxis = d3.svg.axis()
  //     .scale(x)
  //     .orient("bottom");

  // var yAxis = d3.svg.axis()
  //     .scale(y)
  //     .orient("left")
  //     .ticks(10, "%");

   var svg = d3.select("body").append("svg")
  //     .attr("width", width + margin.left + margin.right)
  //     .attr("height", height + margin.top + margin.bottom)
  //   .append("g")
  //     .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // var url = '/courses/1';
// d3.json( url, function( error, data ) {
//     console.log( data );
//     // do all actions required now that the data is retrieved
// } );

  // d3.json("/candidates.json", type, function(error, data) {


  //   if (error) throw error;

  //   x.domain(data.map(function(d) { return d.letter; }));
  //   y.domain([0, d3.max(data, function(d) { return d.frequency; })]);

  //   svg.append("g")
  //       .attr("class", "x axis")
  //       .attr("transform", "translate(0," + height + ")")
  //       .call(xAxis);

  //   svg.append("g")
  //       .attr("class", "y axis")
  //       .call(yAxis)
  //     .append("text")
  //       .attr("transform", "rotate(-90)")
  //       .attr("y", 6)
  //       .attr("dy", ".71em")
  //       .style("text-anchor", "end")
  //       .text("Frequency");

  //   svg.selectAll(".bar")
  //       .data(data)
  //     .enter().append("rect")
  //       .attr("class", "bar")
  //       .attr("x", function(d) { return x(d.letter); })
  //       .attr("width", x.rangeBand())
  //       .attr("y", function(d) { return y(d.frequency); })
  //       .attr("height", function(d) { return height - y(d.frequency); });
  // });

  // function type(d) {
  //   d.frequency = +d.frequency;
  //   return d;
  // }

</script>